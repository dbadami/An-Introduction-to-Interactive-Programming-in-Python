Miniproject 6 - Blackjack
Python Code and Link

Link: http://www.codeskulptor.org/#user5-Zu9HZm9fIh6tVdb-2.py

Python Code:
# Mini-project #6 - Blackjack
import simplegui
import random

#Scoring Rules
"""1. If the player busts he/she loses a point,
if the dealer busts the player gains a point"""
"""2. Hitting deal in the middle of game causes the hands to be re-dealt
to both the dealer and player but the player score drops by one as doing so is
seen as a forfeit."""
"""3. Hitting the deal button repeatedly causes the player 
to lose a point because it is seen as forfeiting the hand."""
"""4. A reset button has been implemented to reset the score ONLY, a new hand must be dealt after
it has been clicked."""

"""Commenting has only been provided for certain portions of the code
that were added or certain states that were not specific in the project template"""

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
player_score = 0
hit_state = False #State to show if the player has hit.
stand_state = False #State to show if the player has hit stand. It is used to determine when to reveal the dealer's hole card.
aces = [] #Empty string that is used to contain an array of Booleans depends on the Aces in the hand.

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank
    def __str__(self):
        return self.suit + self.rank
    def get_suit(self):
        return self.suit
    def get_rank(self):
        return self.rank
    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []
        pass
    
    def add_card(self, card):
        self.hand.append(card)
        pass
    
    """The ___str___ method for class Hand was taken out because it was needed
    once the game was completed as printing to the console is not required"""
    
    # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
    def get_value(self):
        global aces
        aces = []
        value = 0    
        """For loops which appeneds the value based on the hand and also appends the aces
        list depending on whether or not an ace is present in the hand."""
        for card in self.hand:
            value+=VALUES[card.get_rank()]
            if card.get_rank() == 'A':
                aces.append(True)
            else:
                aces.append(False)        
        """Checking if there are any aces in the hand and altering the value
        as needed."""
        if True in aces:
            if value+10<=21:
                value+=10
                
        return value
    def busted(self):
        if self.get_value()>21:
            return True
        else:
            return False
        pass  
    def draw(self, canvas,p):
        """For loop to draw the cards in the dealer's and player's hand."""
        for card in self.hand:
            card.draw(canvas, [10+75*self.hand.index(card),p])    
        pass
    
# define deck class
class Deck:
    def __init__(self):
        self.card_deck = [Card(suit,rank) for suit in SUITS for rank in RANKS]
        pass
    # add cards back to deck and shuffle
    def shuffle(self):
        random.shuffle(self.card_deck)
        pass	
    def deal_card(self):
        return self.card_deck.pop()
   
#define event handlers for buttons
def deal():
    global outcome, in_play, player_score, stand_state
    stand_state=False
    if in_play == True:
        player_score-=1
    
    playerhand.__init__()
    dealerhand.__init__()
    deckofcards.__init__()
    deckofcards.shuffle()
    for x in range(2):
        playerhand.add_card(deckofcards.deal_card())
    for x in range(2):
        dealerhand.add_card(deckofcards.deal_card())
    outcome = "Hit or stand?"
    in_play = True

def hit():
    global in_play, outcome, player_score, stand_state
    if in_play:
        playerhand.add_card(deckofcards.deal_card())
        if playerhand.busted():
            in_play = False
            outcome = "Player has busted! Dealer wins!"
            player_score-=1
            stand_state = True  
        else:
            outcome = "Hit or stand?"    
    else:
        outcome = "New deal?"
    pass	
       
def stand():
    global in_play, outcome, player_score, stand_state
    if in_play:
        stand_state = True
        while dealerhand.get_value()<17:
            dealerhand.add_card(deckofcards.deal_card())
        if dealerhand.busted():
            outcome = "Dealer has busted! Player wins!"
            player_score+=1
        elif dealerhand.get_value()>=playerhand.get_value() or dealerhand.get_value()==21:
            outcome =  "Dealer wins!"
            player_score-=1
        elif dealerhand.get_value()<playerhand.get_value():
            outcome =  "Player wins!"
            player_score+=1
        in_play = False
    else:
        outcome = "New deal?"
    pass

"""Reset button can only be used to reset the score to zero,
a new hand must be dealt after hitting to reset button so that the player
is not able to keep on hitting the reset button until he/she gets a desirable hand."""
def reset_score():
    global player_score, in_play, outcome
    outcome = "Deal new hand! The score is reset."
    in_play=False
    player_score=0
    
# draw handler    
def draw(canvas):
    global outcome, player_score, stand_state
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack", (235, 50), 30, "White")
    canvas.draw_text("Dealer's Hand", (10, 145), 20, "White")
    canvas.draw_text("Player's Hand", (10, 445), 20, "White")
    canvas.draw_text(outcome, [10,325], 30, "White")
    canvas.draw_text("Player Score: "+str(player_score), [10,375], 30, "White")
    playerhand.draw(canvas,450)
    dealerhand.draw(canvas,150)
    
    if not stand_state:
        card_loc_back = (CARD_BACK_CENTER[0], 
                        CARD_BACK_CENTER[1])
        canvas.draw_image(card_back, card_loc_back, CARD_BACK_SIZE, [10+36.5,200], CARD_BACK_SIZE)
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.add_button("Reset", reset_score,200)
frame.set_draw_handler(draw)

# deal an initial hand
deckofcards = Deck()
playerhand = Hand()
dealerhand = Hand()

# get things rolling
frame.start()
deal()

# remember to review the gradic rubric